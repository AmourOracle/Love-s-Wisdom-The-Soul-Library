/* ================= 基本樣式與變數 ================= */
:root {
    --primary-color: #f64740;
    --secondary-color: #333333;
    --background-color: #f5f5f5; /* 結果頁背景 */
    --text-color: #ffffff; /* 主要文字 (白) */
    --text-color-dark: #333333; /* 結果頁文字 */
    --shadow-color: rgba(0, 0, 0, 0.2);
    --card-padding: 24px;
    --border-radius: 12px;
    --transition-duration: 0.6s; /* 基礎屏幕切換時間 */
    --transition-timing: cubic-bezier(0.25, 0.1, 0.25, 1.0);
    --deep-blue-bg: #121824; /* 深藍背景 */
    --preloader-exit-duration: 1.2s; /* Duration for preloader SVG animation */
    --intro-fadein-delay: 0.8s; /* Delay before intro content fades in */
    --intro-fadein-duration: 1s;

    /* --- SVG Animation Timings --- */
    --svg-base-draw-duration: 2.5s; /* Base duration for drawing one part */
    --svg-fill-start-offset: 0.6s; /* How much earlier fill starts before stroke ends (relative to base duration) */
    --svg-glow-delay: calc(var(--svg-base-draw-duration) * 1.1); /* Glow starts slightly after first elements finish drawing */
    --svg-glow-duration: 2.5s;
    --svg-stagger-delay: 0.15s; /* Delay between different parts starting animation */
}

* { box-sizing: border-box; margin: 0; padding: 0; }

body {
    font-family: 'Noto Serif TC', serif, 'Times New Roman', Times, serif;
    line-height: 1.6; background-color: var(--deep-blue-bg); color: var(--text-color);
    height: 100vh; width: 100vw; overflow: hidden; margin: 0; padding: 0;
    display: flex; justify-content: center; align-items: center;
    perspective: 800px;
}

.container {
    width: 100%; max-width: calc(100vh * 9 / 16); height: 100vh;
    max-height: calc(100vw * 16 / 9); position: relative; overflow: hidden;
    background-color: var(--deep-blue-bg); box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    margin: auto;
}

/* ================= 動畫關鍵幀 ================= */
@keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
@keyframes fadeOut { from { opacity: 1; transform: translateY(0); } to { opacity: 0; transform: translateY(-10px); } }
@keyframes spin { to { transform: rotate(360deg); } }
@keyframes explodeForwardBlur {
    0% { opacity: 1; filter: blur(0px); transform: translate3d(0, 0, 5px) rotate(0deg) scale(1); }
    60% { opacity: 0.9; filter: blur(1px); }
    90% { opacity: 0.4; filter: blur(4px); }
    100% { opacity: 0; filter: blur(8px); transform: translate3d(var(--tx, 0), var(--ty, 0), var(--tz, 0)) rotate(var(--rz, 0deg)) scale(var(--sc, 1)); }
}
/* --- Preloader Exit Keyframes --- */
@keyframes preloaderSvgExit {
    from { opacity: 1; transform: translateY(0) scale(1); }
    to { opacity: 0; transform: translateY(-150%) scale(0.5); }
}
@keyframes preloaderBgFadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}
/* --- Intro Content Fade In --- */
@keyframes introElementFadeIn {
    from { opacity: 0; transform: translateY(15px); }
    to { opacity: 1; transform: translateY(0); }
}

/* --- SVG Animation Keyframes (Revised for Smooth Fill) --- */
@keyframes drawStrokeAndFill {
    0% {
        stroke-dashoffset: 1500; /* Start fully hidden */
        fill: none;
        fill-opacity: 0; /* Ensure fill starts transparent */
        opacity: 1;
    }
    70% { /* Stroke mostly complete */
        stroke-dashoffset: 0;
        fill: var(--svg-fill-color, #ffffff); /* Set fill color */
        fill-opacity: 0; /* Keep fill transparent */
        opacity: 1;
    }
    /* Fill fades in between 70% and 100% */
    100% {
        stroke-dashoffset: 0;
        fill: var(--svg-fill-color, #ffffff); /* Ensure fill color is set */
        fill-opacity: 1; /* Fade fill in */
        opacity: 1;
    }
}

/* Paths that only fade in (no stroke animation) - Keep as is, unless L/W were here */
@keyframes fadeInPath {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* --- SVG Glow Keyframes (Revised Delay based on CSS Var) --- */
@keyframes glow { /* Subtle pulsing glow */
    from { filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.6)) drop-shadow(0 0 10px rgba(246, 71, 64, 0.4)); }
    to { filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.8)) drop-shadow(0 0 15px rgba(246, 71, 64, 0.6)); }
}
@keyframes fadeInGlow { /* Simple fade in for the glow effect */
     from { filter: drop-shadow(0 0 0px rgba(255, 255, 255, 0)) drop-shadow(0 0 0px rgba(246, 71, 64, 0)); opacity: 0; }
     /* Start glow animation slightly after the first elements finish drawing */
     to { filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.6)) drop-shadow(0 0 10px rgba(246, 71, 64, 0.4)); opacity: 1;}
}

/* ================= 預加載畫面 ================= */
.preloader {
    z-index: 9999;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: var(--deep-blue-bg);
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    pointer-events: none;
    transition: visibility 0s linear var(--preloader-exit-duration), opacity var(--preloader-exit-duration) ease-out;
    visibility: hidden;
}
.preloader.active {
    opacity: 1;
    pointer-events: auto;
    visibility: visible;
    transition: none;
}
.preloader.transitioning-out {
    animation: preloaderBgFadeOut var(--preloader-exit-duration) ease-out forwards;
    pointer-events: none;
    opacity: 0; /* Ensure final state is hidden */
    visibility: hidden; /* Ensure final state is hidden */
}
.preloader.transitioning-out .preloader-content {
     background-color: transparent;
}
/* Target SVG using its container and ID */
.preloader.transitioning-out #preloader-svg-container #preloader-svg {
    animation: preloaderSvgExit var(--preloader-exit-duration) cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards;
}

.preloader-content {
    text-align: center;
    color: var(--text-color);
    width: 90%;
    max-width: 450px;
    position: relative;
}

/* --- Preloader SVG Specific Styling (Revised) --- */
#preloader-svg-container {
    width: 100%;
    margin-bottom: 20px;
}

#preloader-svg {
    width: 100%;
    height: auto;
    display: block;
    overflow: visible;
    will-change: filter, transform, opacity;
    transform: translateY(0) scale(1);
    opacity: 1;
    filter: none; /* Start without glow */
}
#preloader-svg.glow-active {
    /* Apply glow using CSS variable for delay */
    animation: fadeInGlow calc(var(--svg-glow-duration) * 0.4) ease-out var(--svg-glow-delay) forwards,
               glow var(--svg-glow-duration) ease-in-out calc(var(--svg-glow-delay) + (var(--svg-glow-duration) * 0.4)) infinite alternate;
}

/* SVG Path Animation Setup (Revised for Staggering and Corrected Selectors) */
#preloader-svg-container #preloader-svg path {
    stroke-width: 0.5px; /* Keep stroke width */
    stroke-dasharray: 1500; /* Assumed sufficient length */
    stroke-dashoffset: 1500; /* Start hidden */
    fill: none; /* Start with no fill */
    opacity: 0; /* Start invisible, animation will make it visible */
    transform: translateZ(0); /* Promote to own layer */
    will-change: stroke-dashoffset, fill, opacity;
    /* Apply the single combined animation */
    animation: drawStrokeAndFill var(--svg-base-draw-duration) ease-out forwards;
}

/* Apply STAGGERING delays and specific fill colors */
/* --- IMPORTANT: You might need to adjust which classes get which delay based on your SVG structure! --- */
/* Assuming .st1 is the main white part (maybe O, S, V, I, D, M) */
#preloader-svg-container #preloader-svg .st1 {
    stroke: #ffffff;
    --svg-fill-color: #ffffff; /* Define fill color for the keyframe */
    animation-delay: 0s; /* Start first */
}

/* Assuming .st3 is the grey part (maybe the lines inside 'O'?) */
#preloader-svg-container #preloader-svg .st3 {
    stroke: #f2f2f2;
    --svg-fill-color: #f2f2f2; /* Define fill color */
    animation-delay: calc(var(--svg-stagger-delay) * 1); /* Start slightly later */
}

/* --- FIX for L and W: Apply animation to their classes --- */
/* Check your SVG: Identify classes for L and W. Let's ASSUME they are .st2 and .st4 for this example */
#preloader-svg-container #preloader-svg .st2 { /* Example: Assuming this is 'L' */
    stroke: #ffffff;
    --svg-fill-color: #ffffff;
    animation-delay: calc(var(--svg-stagger-delay) * 2); /* Start later */
}
#preloader-svg-container #preloader-svg .st4 { /* Example: Assuming this is 'W' */
    stroke: #ffffff;
    --svg-fill-color: #ffffff;
    animation-delay: calc(var(--svg-stagger-delay) * 3); /* Start even later */
}


/* --- Elements that should ONLY fade in (if any remain) --- */
/* If .st0 and .st5 are truly just fills with no stroke needed, keep them here. */
/* Otherwise, move them to a stroke animation rule above. */
#preloader-svg-container #preloader-svg .st0,
#preloader-svg-container #preloader-svg .st5 {
    stroke: none; /* Ensure no stroke is attempted */
    fill: #ffffff; /* Set fill color directly */
    opacity: 0; /* Start hidden */
    /* Fade in starts after initial strokes begin */
    animation: fadeInPath calc(var(--svg-base-draw-duration) * 0.6) ease-in calc(var(--svg-stagger-delay) * 2) forwards;
    /* Override stroke properties just in case */
    stroke-dasharray: none;
    stroke-dashoffset: 0;
}


/* ================= 通用屏幕容器 ================= */
.screen-container {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--transition-duration) var(--transition-timing), visibility 0s linear var(--transition-duration);
    overflow: hidden;
    background-color: var(--deep-blue-bg);
}
.screen-container.active {
    opacity: 1;
    visibility: visible;
    transition: opacity var(--transition-duration) var(--transition-timing), visibility 0s linear 0s;
}

#test-container { background-color: transparent; } /* Allow test background image to show */
#result-container {
    background-color: var(--background-color);
    overflow-y: auto;
    color: var(--text-color-dark); /* Ensure text is dark on light background */
}
/* Hide scrollbar consistently */
#result-container::-webkit-scrollbar { display: none; width: 0; background: transparent; }
#result-container { scrollbar-width: none; -ms-overflow-style: none; }


/* ================= 首頁卡片式設計 ================= */
.intro-background {
    position: absolute; top: 0; left: 0; width: 100%; height: 100%;
    background-size: cover; background-position: center; z-index: 1;
    opacity: 0;
}
.intro-overlay {
    content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%;
    background: linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 30%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0.7) 100%);
    z-index: 2;
    opacity: 0;
}

.intro-content {
    position: relative; z-index: 3;
    height: 100%; display: flex; flex-direction: column; justify-content: space-between;
    padding: 40px 30px;
}

/* Apply fade-in animation to intro elements when intro becomes active */
#intro-container.active .intro-background,
#intro-container.active .intro-overlay {
    animation: introElementFadeIn var(--intro-fadein-duration) ease-out var(--intro-fadein-delay) forwards;
}
#intro-container.active .intro-title-placeholder {
    opacity: 0; /* Start hidden before animation */
    animation: introElementFadeIn var(--intro-fadein-duration) ease-out calc(var(--intro-fadein-delay) + 0.2s) forwards;
}
#intro-container.active .card-body,
#intro-container.active .card-footer {
    opacity: 0; /* Start hidden before animation */
    animation: introElementFadeIn var(--intro-fadein-duration) ease-out calc(var(--intro-fadein-delay) + 0.4s) forwards;
}

/* --- Intro Title Placeholder & SVG --- */
.intro-title-placeholder {
    position: absolute;
    top: 5%;
    left: 50%;
    transform: translateX(-50%); /* Horizontal centering */
    width: 60%;
    max-width: 300px;
    z-index: 4;
    display: flex;
    justify-content: center;
    align-items: center;
}
/* Style the cloned SVG - No animation needed here, just appearance */
#intro-title-svg {
    width: 100%;
    height: auto;
    filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.6)) drop-shadow(0 0 10px rgba(246, 71, 64, 0.4));
    transition: filter 0.5s ease-in-out;
}
#intro-title-svg path {
    /* Ensure paths are filled white by default for the intro title */
    fill: #ffffff;
    stroke: none; /* Usually no stroke needed for the static title */
    opacity: 1; /* Ensure visible */
    /* Override any animation styles potentially inherited from clone */
    animation: none !important;
    stroke-dasharray: none !important;
    stroke-dashoffset: 0 !important;
}
/* If specific paths need different colors in the static title, add rules here */
/* e.g., #intro-title-svg .st3 { fill: #f2f2f2; } */


/* Card Body, Footer, Meta */
.card-body { flex: 1; display: flex; flex-direction: column; justify-content: center; }
.card-body .description { font-size: 18px; line-height: 1.6; margin-bottom: 20px; max-width: 90%; text-align: center; margin-left: auto; margin-right: auto; }
.card-footer { margin-bottom: 40px; text-align: center; position: relative; }
.card-meta { margin-top: 20px; font-size: 12px; opacity: 0.7; text-align: center; }

/* ================= 按鈕樣式 ================= */
.btn { display: inline-block; padding: 14px 28px; border-radius: 50px; border: none; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; font-family: 'Noto Serif TC', serif; text-align: center; margin: 0 auto; position: relative; }
.btn-svg-style { background-color: transparent; border: 1px solid rgba(255, 255, 255, 0.7); color: rgba(255, 255, 255, 0.9); padding: 12px 30px; border-radius: 8px; transition: background-color 0.4s ease, color 0.4s ease, box-shadow 0.4s ease, transform 0.3s ease; box-shadow: 0 0 8px rgba(246, 71, 64, 0); }
.btn-svg-style:hover { background-color: rgba(246, 71, 64, 0.15); color: #ffffff; border-color: rgba(255, 255, 255, 0.9); transform: translateY(-2px) scale(1.02); box-shadow: 0 0 15px rgba(246, 71, 64, 0.6); }
.btn-svg-style .btn-text { display: inline-block; transition: opacity 0.3s ease; opacity: 1; }
.btn-svg-style .btn-text.hidden { opacity: 0; }
/* Added rule for start button explosion effect */
.btn.exploded {
    opacity: 0 !important;
    transform: scale(0.9) !important;
    transition: opacity 0.3s ease-out, transform 0.3s ease-out !important;
    pointer-events: none;
}

.primary-btn { background-color: var(--primary-color); color: white; }
.primary-btn:hover { background-color: #e53935; transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); }
.secondary-btn { background-color: transparent; color: white; border: 1px solid white; }
.secondary-btn:hover { background-color: rgba(255, 255, 255, 0.1); }
#result-container .primary-btn { background-color: var(--primary-color); color: white; }
#result-container .primary-btn:hover { background-color: #e53935; transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); }
#result-container .secondary-btn { background-color: transparent; color: var(--secondary-color); border: 1px solid var(--secondary-color); }
#result-container .secondary-btn:hover { background-color: rgba(0, 0, 0, 0.05); transform: translateY(-2px); }

/* ================= 測驗頁面 ================= */
#test-container { display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 80px 20px 40px; perspective: 800px; position: relative; }
#test-background { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-size: cover; background-position: center; z-index: 5; opacity: 1; filter: blur(0px); transition: opacity 0.8s ease-out, filter 0.8s ease-out; }
#test-background.is-hidden { opacity: 0; filter: blur(10px); pointer-events: none; }
.progress-container { position: absolute; top: 0; left: 0; width: 100%; padding: 10px 15px 5px; background: linear-gradient(to bottom, rgba(18, 24, 36, 0.7), rgba(18, 24, 36, 0)); z-index: 30; }
.progress-bar { background-color: rgba(255, 255, 255, 0.2); height: 4px; border-radius: 2px; overflow: hidden; }
.progress-fill { background-color: var(--primary-color); height: 100%; width: 0%; transition: width 0.5s cubic-bezier(0.33, 1, 0.68, 1); }
#question-title { color: rgba(255, 255, 255, 0.9); font-size: 24px; font-weight: 500; line-height: 1.5; text-align: center; margin-bottom: 40px; position: relative; z-index: 20; width: 100%; max-width: 90%; opacity: 1; filter: blur(0px); transform: translateY(0); transition: opacity 0.5s ease-out, filter 0.5s ease-out, transform 0.5s ease-out; }
#question-title.is-hidden { opacity: 0; filter: blur(5px); transform: translateY(-10px); pointer-events: none; }
#options-container { display: flex; flex-direction: column; gap: 15px; width: 100%; max-width: 400px; position: relative; z-index: 10; }
.option { background-color: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 15px 25px; border-radius: 10px; cursor: pointer; text-align: center; font-size: 16px; transition: background-color 0.3s ease, opacity 0.5s ease-out, filter 0.5s ease-out, transform 0.5s ease-out; position: relative; overflow: hidden; min-height: 50px; transform-style: preserve-3d; opacity: 1; filter: blur(0px); transform: translateY(0); }
.option.is-hidden { opacity: 0; filter: blur(5px); transform: translateY(15px); pointer-events: none; }
.option.fade-out { opacity: 0 !important; filter: blur(8px) !important; transform: translateY(0) !important; transition: opacity 0.5s ease-out, filter 0.5s ease-out !important; pointer-events: none; }
.option.exploded { opacity: 0 !important; transform: scale(0.9) !important; transition: opacity 0.3s ease-out, transform 0.3s ease-out !important; pointer-events: none; }
.option:hover { background-color: rgba(255, 255, 255, 0.2); }

/* ================= Explosion Containers ================= */
#explosion-container,
#start-btn-explosion-container {
    position: absolute;
    top: 0; left: 0; width: 100%; height: 100%;
    pointer-events: none; overflow: hidden; z-index: 1000;
    transform-style: preserve-3d;
}
.char-explode { display: inline-block; position: absolute; color: white; font-size: 24px; font-weight: bold; opacity: 1; animation: explodeForwardBlur 1.0s forwards cubic-bezier(0.16, 1, 0.3, 1); white-space: pre; will-change: transform, opacity, filter; transform-style: preserve-3d; filter: blur(0px); }

/* ================= 結果頁面樣式 ================= */
.result-card { background-color: white; border-radius: var(--border-radius); box-shadow: 0 5px 15px var(--shadow-color); padding: var(--card-padding); max-width: 800px; margin: 40px auto; text-align: center; animation: fadeIn 0.8s ease-out; }
.result-title { font-size: 24px; color: var(--primary-color); margin-bottom: 15px; }
.result-subtitle { font-style: italic; color: var(--secondary-color); margin-bottom: 20px; }
.result-description { padding: 20px; background-color: rgba(0, 0, 0, 0.03); border-radius: 8px; margin-bottom: 25px; text-align: left; }
.book-traits, .related-books { margin: 25px 0; animation: fadeIn 1s ease-out 0.3s backwards; }
h3 { color: var(--secondary-color); margin-bottom: 15px; font-size: 18px; }
.trait-item { display: flex; justify-content: space-between; margin-bottom: 10px; padding: 5px 10px; border-radius: 6px; transition: background-color 0.3s ease; }
.trait-item:hover { background-color: rgba(0, 0, 0, 0.03); }
.trait-stars { color: var(--primary-color); }
.share-section { margin: 25px 0; }
.share-text { background-color: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #ddd; margin: 15px 0; white-space: pre-wrap; text-align: left; animation: fadeIn 1s ease-out 0.6s backwards; }
.action-buttons { display: flex; gap: 15px; margin-top: 20px; justify-content: center; animation: fadeIn 1s ease-out 0.9s backwards; }
.action-buttons .btn { flex: 1; max-width: 150px; }

/* ================= 響應式設計 ================= */
@media (max-width: 768px) { #test-container { padding: 60px 15px 30px; } #question-title { font-size: 20px; margin-bottom: 30px; } #options-container { gap: 10px; } .option { padding: 12px 20px; font-size: 14px; min-height: 44px;} .intro-content { padding: 40px 20px; } .card-body .description { font-size: 16px; } .card-footer { margin-bottom: 20px; } .progress-container { padding: 8px 15px 2px; } .intro-title-placeholder { width: 70%; top: 3%; } }
@media (max-width: 375px) and (max-height: 667px) { #question-title { font-size: 18px; margin-bottom: 25px; } .option { padding: 10px 15px; font-size: 13px; min-height: 40px; } #options-container { gap: 8px; } .intro-title-placeholder { width: 80%; } }
@media (max-width: 900px) and (orientation: landscape) { .container { max-width: 100vw; max-height: 100vh; } #test-container { padding: 20px; justify-content: center; } #question-title { margin-bottom: 20px; font-size: 20px; } #options-container { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; max-width: 90%; } .result-card { margin: 20px auto; } .intro-title-placeholder { width: 40%; top: 2%; } }